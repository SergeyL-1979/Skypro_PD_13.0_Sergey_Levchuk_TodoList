# Определение версии Docker Compose и начало описания сервисов
version: '3.9'

services:
  frontend:
    image: sermalenk/skypro-front:lesson-34
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - api

  api:
    # Сборка образа для сервиса django из текущей директории
    build: .
    # Задание имени контейнера для сервиса django
    container_name: api
    # Задание команды, которую нужно запустить при запуске контейнера для сервиса django
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    # Открытие порта на хостовой машине и перенаправление на порт в контейнере
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: pgdb
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${SQL_DB_NAME}
      POSTGRES_USER: ${SQL_DB_USER}
      POSTGRES_PASSWORD: ${SQL_DB_PASSWORD}
    # Зависимость от другого сервиса
    depends_on:
      - pgdb

  migrations:
    build:
      context: .
    container_name: migrations
    environment:
      POSTGRES_HOST: pgdb
      POSTGRES_PORT: 5432
    depends_on:
      api:
        condition: service_started
      pgdb:
        condition: service_healthy
    networks:
      - net
    command: python manage.py migrate

  createuser:
    build:
      context: .
    container_name: superuser
    depends_on:
      api:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    command:
      python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('${SUPERUSER_USERNAME}', '${SUPERUSER_EMAIL}', '${SUPERUSER_PASSWORD}')"

  pgdb:
    # Использование готового образа postgres
    image: postgres:15.0-alpine
    # Задание переменных окружения для контейнера с postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${SQL_DB_NAME}
      POSTGRES_USER: ${SQL_DB_USER}
      POSTGRES_PASSWORD: ${SQL_DB_PASSWORD}
    restart: always
     # Задание имени контейнера для сервиса pgdb
    container_name: pgdb
     # Связывание тома с директорией в контейнере для сохранения данных postgres
    volumes:
#      - pgdbdata:/var/lib/postgresql/data/
      - pgdbdata:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_DB_USER} -d ${SQL_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 15
    networks:
      - net

volumes:
  pgdbdata:
  database:
  frontend:
  net:
    driver: local
